package android.zhixun.uiho.com.gissystem.greendao_gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import android.zhixun.uiho.com.gissystem.flux.models.CRModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CRMODEL".
*/
public class CRModelDao extends AbstractDao<CRModel, Long> {

    public static final String TABLENAME = "CRMODEL";

    /**
     * Properties of entity CRModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Check_unit = new Property(1, String.class, "check_unit", false, "CHECK_UNIT");
        public final static Property Checked_unit = new Property(2, String.class, "checked_unit", false, "CHECKED_UNIT");
        public final static Property Match_person = new Property(3, String.class, "match_person", false, "MATCH_PERSON");
        public final static Property Contacts = new Property(4, String.class, "contacts", false, "CONTACTS");
        public final static Property Contact_number = new Property(5, String.class, "contact_number", false, "CONTACT_NUMBER");
        public final static Property Check_time = new Property(6, String.class, "check_time", false, "CHECK_TIME");
        public final static Property EtTempCheckPerson = new Property(7, String.class, "etTempCheckPerson", false, "ET_TEMP_CHECK_PERSON");
        public final static Property EtOtherZGIdea = new Property(8, String.class, "etOtherZGIdea", false, "ET_OTHER_ZGIDEA");
        public final static Property SituationCheck_one = new Property(9, int.class, "situationCheck_one", false, "SITUATION_CHECK_ONE");
        public final static Property SituationCheck_three = new Property(10, int.class, "situationCheck_three", false, "SITUATION_CHECK_THREE");
        public final static Property SituationCheck_four = new Property(11, int.class, "situationCheck_four", false, "SITUATION_CHECK_FOUR");
        public final static Property SituationCheck_five = new Property(12, int.class, "situationCheck_five", false, "SITUATION_CHECK_FIVE");
        public final static Property SituationCheck_six = new Property(13, int.class, "situationCheck_six", false, "SITUATION_CHECK_SIX");
        public final static Property SituationCheck_seven = new Property(14, int.class, "situationCheck_seven", false, "SITUATION_CHECK_SEVEN");
        public final static Property SituationCheck_eight = new Property(15, int.class, "situationCheck_eight", false, "SITUATION_CHECK_EIGHT");
        public final static Property SituationCheck_nine = new Property(16, int.class, "situationCheck_nine", false, "SITUATION_CHECK_NINE");
        public final static Property SituationCheck_ten = new Property(17, int.class, "situationCheck_ten", false, "SITUATION_CHECK_TEN");
        public final static Property SituationCheck_elevn = new Property(18, int.class, "situationCheck_elevn", false, "SITUATION_CHECK_ELEVN");
        public final static Property SituationCheck_twelve = new Property(19, int.class, "situationCheck_twelve", false, "SITUATION_CHECK_TWELVE");
        public final static Property SituationCheck_thirteen = new Property(20, int.class, "situationCheck_thirteen", false, "SITUATION_CHECK_THIRTEEN");
        public final static Property SituationCheck_fourteen = new Property(21, int.class, "situationCheck_fourteen", false, "SITUATION_CHECK_FOURTEEN");
        public final static Property SituationCheck_fifteen = new Property(22, int.class, "situationCheck_fifteen", false, "SITUATION_CHECK_FIFTEEN");
        public final static Property Otherproblemsthat = new Property(23, String.class, "Otherproblemsthat", false, "OTHERPROBLEMSTHAT");
        public final static Property RectificationOpinions_one = new Property(24, int.class, "rectificationOpinions_one", false, "RECTIFICATION_OPINIONS_ONE");
        public final static Property RectificationOpinions_two = new Property(25, int.class, "rectificationOpinions_two", false, "RECTIFICATION_OPINIONS_TWO");
        public final static Property RectificationOpinions_three = new Property(26, int.class, "rectificationOpinions_three", false, "RECTIFICATION_OPINIONS_THREE");
        public final static Property RectificationOpinions_four = new Property(27, int.class, "rectificationOpinions_four", false, "RECTIFICATION_OPINIONS_FOUR");
        public final static Property RectificationOpinions_five = new Property(28, int.class, "rectificationOpinions_five", false, "RECTIFICATION_OPINIONS_FIVE");
        public final static Property LeaderIdea_one = new Property(29, int.class, "leaderIdea_one", false, "LEADER_IDEA_ONE");
        public final static Property LeaderIdea_two = new Property(30, int.class, "leaderIdea_two", false, "LEADER_IDEA_TWO");
        public final static Property LeaderIdeacontent = new Property(31, String.class, "leaderIdeacontent", false, "LEADER_IDEACONTENT");
        public final static Property LeaderIdea_three = new Property(32, int.class, "leaderIdea_three", false, "LEADER_IDEA_THREE");
        public final static Property IsLocal = new Property(33, boolean.class, "isLocal", false, "IS_LOCAL");
        public final static Property SaveTime = new Property(34, long.class, "saveTime", false, "SAVE_TIME");
        public final static Property SavaServerTime = new Property(35, long.class, "savaServerTime", false, "SAVA_SERVER_TIME");
        public final static Property UnitId = new Property(36, int.class, "unitId", false, "UNIT_ID");
    }

    private DaoSession daoSession;


    public CRModelDao(DaoConfig config) {
        super(config);
    }
    
    public CRModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CRMODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CHECK_UNIT\" TEXT," + // 1: check_unit
                "\"CHECKED_UNIT\" TEXT," + // 2: checked_unit
                "\"MATCH_PERSON\" TEXT," + // 3: match_person
                "\"CONTACTS\" TEXT," + // 4: contacts
                "\"CONTACT_NUMBER\" TEXT," + // 5: contact_number
                "\"CHECK_TIME\" TEXT," + // 6: check_time
                "\"ET_TEMP_CHECK_PERSON\" TEXT," + // 7: etTempCheckPerson
                "\"ET_OTHER_ZGIDEA\" TEXT," + // 8: etOtherZGIdea
                "\"SITUATION_CHECK_ONE\" INTEGER NOT NULL ," + // 9: situationCheck_one
                "\"SITUATION_CHECK_THREE\" INTEGER NOT NULL ," + // 10: situationCheck_three
                "\"SITUATION_CHECK_FOUR\" INTEGER NOT NULL ," + // 11: situationCheck_four
                "\"SITUATION_CHECK_FIVE\" INTEGER NOT NULL ," + // 12: situationCheck_five
                "\"SITUATION_CHECK_SIX\" INTEGER NOT NULL ," + // 13: situationCheck_six
                "\"SITUATION_CHECK_SEVEN\" INTEGER NOT NULL ," + // 14: situationCheck_seven
                "\"SITUATION_CHECK_EIGHT\" INTEGER NOT NULL ," + // 15: situationCheck_eight
                "\"SITUATION_CHECK_NINE\" INTEGER NOT NULL ," + // 16: situationCheck_nine
                "\"SITUATION_CHECK_TEN\" INTEGER NOT NULL ," + // 17: situationCheck_ten
                "\"SITUATION_CHECK_ELEVN\" INTEGER NOT NULL ," + // 18: situationCheck_elevn
                "\"SITUATION_CHECK_TWELVE\" INTEGER NOT NULL ," + // 19: situationCheck_twelve
                "\"SITUATION_CHECK_THIRTEEN\" INTEGER NOT NULL ," + // 20: situationCheck_thirteen
                "\"SITUATION_CHECK_FOURTEEN\" INTEGER NOT NULL ," + // 21: situationCheck_fourteen
                "\"SITUATION_CHECK_FIFTEEN\" INTEGER NOT NULL ," + // 22: situationCheck_fifteen
                "\"OTHERPROBLEMSTHAT\" TEXT," + // 23: Otherproblemsthat
                "\"RECTIFICATION_OPINIONS_ONE\" INTEGER NOT NULL ," + // 24: rectificationOpinions_one
                "\"RECTIFICATION_OPINIONS_TWO\" INTEGER NOT NULL ," + // 25: rectificationOpinions_two
                "\"RECTIFICATION_OPINIONS_THREE\" INTEGER NOT NULL ," + // 26: rectificationOpinions_three
                "\"RECTIFICATION_OPINIONS_FOUR\" INTEGER NOT NULL ," + // 27: rectificationOpinions_four
                "\"RECTIFICATION_OPINIONS_FIVE\" INTEGER NOT NULL ," + // 28: rectificationOpinions_five
                "\"LEADER_IDEA_ONE\" INTEGER NOT NULL ," + // 29: leaderIdea_one
                "\"LEADER_IDEA_TWO\" INTEGER NOT NULL ," + // 30: leaderIdea_two
                "\"LEADER_IDEACONTENT\" TEXT," + // 31: leaderIdeacontent
                "\"LEADER_IDEA_THREE\" INTEGER NOT NULL ," + // 32: leaderIdea_three
                "\"IS_LOCAL\" INTEGER NOT NULL ," + // 33: isLocal
                "\"SAVE_TIME\" INTEGER NOT NULL ," + // 34: saveTime
                "\"SAVA_SERVER_TIME\" INTEGER NOT NULL ," + // 35: savaServerTime
                "\"UNIT_ID\" INTEGER NOT NULL );"); // 36: unitId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CRMODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CRModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String check_unit = entity.getCheck_unit();
        if (check_unit != null) {
            stmt.bindString(2, check_unit);
        }
 
        String checked_unit = entity.getChecked_unit();
        if (checked_unit != null) {
            stmt.bindString(3, checked_unit);
        }
 
        String match_person = entity.getMatch_person();
        if (match_person != null) {
            stmt.bindString(4, match_person);
        }
 
        String contacts = entity.getContacts();
        if (contacts != null) {
            stmt.bindString(5, contacts);
        }
 
        String contact_number = entity.getContact_number();
        if (contact_number != null) {
            stmt.bindString(6, contact_number);
        }
 
        String check_time = entity.getCheck_time();
        if (check_time != null) {
            stmt.bindString(7, check_time);
        }
 
        String etTempCheckPerson = entity.getEtTempCheckPerson();
        if (etTempCheckPerson != null) {
            stmt.bindString(8, etTempCheckPerson);
        }
 
        String etOtherZGIdea = entity.getEtOtherZGIdea();
        if (etOtherZGIdea != null) {
            stmt.bindString(9, etOtherZGIdea);
        }
        stmt.bindLong(10, entity.getSituationCheck_one());
        stmt.bindLong(11, entity.getSituationCheck_three());
        stmt.bindLong(12, entity.getSituationCheck_four());
        stmt.bindLong(13, entity.getSituationCheck_five());
        stmt.bindLong(14, entity.getSituationCheck_six());
        stmt.bindLong(15, entity.getSituationCheck_seven());
        stmt.bindLong(16, entity.getSituationCheck_eight());
        stmt.bindLong(17, entity.getSituationCheck_nine());
        stmt.bindLong(18, entity.getSituationCheck_ten());
        stmt.bindLong(19, entity.getSituationCheck_elevn());
        stmt.bindLong(20, entity.getSituationCheck_twelve());
        stmt.bindLong(21, entity.getSituationCheck_thirteen());
        stmt.bindLong(22, entity.getSituationCheck_fourteen());
        stmt.bindLong(23, entity.getSituationCheck_fifteen());
 
        String Otherproblemsthat = entity.getOtherproblemsthat();
        if (Otherproblemsthat != null) {
            stmt.bindString(24, Otherproblemsthat);
        }
        stmt.bindLong(25, entity.getRectificationOpinions_one());
        stmt.bindLong(26, entity.getRectificationOpinions_two());
        stmt.bindLong(27, entity.getRectificationOpinions_three());
        stmt.bindLong(28, entity.getRectificationOpinions_four());
        stmt.bindLong(29, entity.getRectificationOpinions_five());
        stmt.bindLong(30, entity.getLeaderIdea_one());
        stmt.bindLong(31, entity.getLeaderIdea_two());
 
        String leaderIdeacontent = entity.getLeaderIdeacontent();
        if (leaderIdeacontent != null) {
            stmt.bindString(32, leaderIdeacontent);
        }
        stmt.bindLong(33, entity.getLeaderIdea_three());
        stmt.bindLong(34, entity.getIsLocal() ? 1L: 0L);
        stmt.bindLong(35, entity.getSaveTime());
        stmt.bindLong(36, entity.getSavaServerTime());
        stmt.bindLong(37, entity.getUnitId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CRModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String check_unit = entity.getCheck_unit();
        if (check_unit != null) {
            stmt.bindString(2, check_unit);
        }
 
        String checked_unit = entity.getChecked_unit();
        if (checked_unit != null) {
            stmt.bindString(3, checked_unit);
        }
 
        String match_person = entity.getMatch_person();
        if (match_person != null) {
            stmt.bindString(4, match_person);
        }
 
        String contacts = entity.getContacts();
        if (contacts != null) {
            stmt.bindString(5, contacts);
        }
 
        String contact_number = entity.getContact_number();
        if (contact_number != null) {
            stmt.bindString(6, contact_number);
        }
 
        String check_time = entity.getCheck_time();
        if (check_time != null) {
            stmt.bindString(7, check_time);
        }
 
        String etTempCheckPerson = entity.getEtTempCheckPerson();
        if (etTempCheckPerson != null) {
            stmt.bindString(8, etTempCheckPerson);
        }
 
        String etOtherZGIdea = entity.getEtOtherZGIdea();
        if (etOtherZGIdea != null) {
            stmt.bindString(9, etOtherZGIdea);
        }
        stmt.bindLong(10, entity.getSituationCheck_one());
        stmt.bindLong(11, entity.getSituationCheck_three());
        stmt.bindLong(12, entity.getSituationCheck_four());
        stmt.bindLong(13, entity.getSituationCheck_five());
        stmt.bindLong(14, entity.getSituationCheck_six());
        stmt.bindLong(15, entity.getSituationCheck_seven());
        stmt.bindLong(16, entity.getSituationCheck_eight());
        stmt.bindLong(17, entity.getSituationCheck_nine());
        stmt.bindLong(18, entity.getSituationCheck_ten());
        stmt.bindLong(19, entity.getSituationCheck_elevn());
        stmt.bindLong(20, entity.getSituationCheck_twelve());
        stmt.bindLong(21, entity.getSituationCheck_thirteen());
        stmt.bindLong(22, entity.getSituationCheck_fourteen());
        stmt.bindLong(23, entity.getSituationCheck_fifteen());
 
        String Otherproblemsthat = entity.getOtherproblemsthat();
        if (Otherproblemsthat != null) {
            stmt.bindString(24, Otherproblemsthat);
        }
        stmt.bindLong(25, entity.getRectificationOpinions_one());
        stmt.bindLong(26, entity.getRectificationOpinions_two());
        stmt.bindLong(27, entity.getRectificationOpinions_three());
        stmt.bindLong(28, entity.getRectificationOpinions_four());
        stmt.bindLong(29, entity.getRectificationOpinions_five());
        stmt.bindLong(30, entity.getLeaderIdea_one());
        stmt.bindLong(31, entity.getLeaderIdea_two());
 
        String leaderIdeacontent = entity.getLeaderIdeacontent();
        if (leaderIdeacontent != null) {
            stmt.bindString(32, leaderIdeacontent);
        }
        stmt.bindLong(33, entity.getLeaderIdea_three());
        stmt.bindLong(34, entity.getIsLocal() ? 1L: 0L);
        stmt.bindLong(35, entity.getSaveTime());
        stmt.bindLong(36, entity.getSavaServerTime());
        stmt.bindLong(37, entity.getUnitId());
    }

    @Override
    protected final void attachEntity(CRModel entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CRModel readEntity(Cursor cursor, int offset) {
        CRModel entity = new CRModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // check_unit
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // checked_unit
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // match_person
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // contacts
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // contact_number
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // check_time
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // etTempCheckPerson
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // etOtherZGIdea
            cursor.getInt(offset + 9), // situationCheck_one
            cursor.getInt(offset + 10), // situationCheck_three
            cursor.getInt(offset + 11), // situationCheck_four
            cursor.getInt(offset + 12), // situationCheck_five
            cursor.getInt(offset + 13), // situationCheck_six
            cursor.getInt(offset + 14), // situationCheck_seven
            cursor.getInt(offset + 15), // situationCheck_eight
            cursor.getInt(offset + 16), // situationCheck_nine
            cursor.getInt(offset + 17), // situationCheck_ten
            cursor.getInt(offset + 18), // situationCheck_elevn
            cursor.getInt(offset + 19), // situationCheck_twelve
            cursor.getInt(offset + 20), // situationCheck_thirteen
            cursor.getInt(offset + 21), // situationCheck_fourteen
            cursor.getInt(offset + 22), // situationCheck_fifteen
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // Otherproblemsthat
            cursor.getInt(offset + 24), // rectificationOpinions_one
            cursor.getInt(offset + 25), // rectificationOpinions_two
            cursor.getInt(offset + 26), // rectificationOpinions_three
            cursor.getInt(offset + 27), // rectificationOpinions_four
            cursor.getInt(offset + 28), // rectificationOpinions_five
            cursor.getInt(offset + 29), // leaderIdea_one
            cursor.getInt(offset + 30), // leaderIdea_two
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // leaderIdeacontent
            cursor.getInt(offset + 32), // leaderIdea_three
            cursor.getShort(offset + 33) != 0, // isLocal
            cursor.getLong(offset + 34), // saveTime
            cursor.getLong(offset + 35), // savaServerTime
            cursor.getInt(offset + 36) // unitId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CRModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCheck_unit(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChecked_unit(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMatch_person(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContacts(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContact_number(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCheck_time(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEtTempCheckPerson(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEtOtherZGIdea(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSituationCheck_one(cursor.getInt(offset + 9));
        entity.setSituationCheck_three(cursor.getInt(offset + 10));
        entity.setSituationCheck_four(cursor.getInt(offset + 11));
        entity.setSituationCheck_five(cursor.getInt(offset + 12));
        entity.setSituationCheck_six(cursor.getInt(offset + 13));
        entity.setSituationCheck_seven(cursor.getInt(offset + 14));
        entity.setSituationCheck_eight(cursor.getInt(offset + 15));
        entity.setSituationCheck_nine(cursor.getInt(offset + 16));
        entity.setSituationCheck_ten(cursor.getInt(offset + 17));
        entity.setSituationCheck_elevn(cursor.getInt(offset + 18));
        entity.setSituationCheck_twelve(cursor.getInt(offset + 19));
        entity.setSituationCheck_thirteen(cursor.getInt(offset + 20));
        entity.setSituationCheck_fourteen(cursor.getInt(offset + 21));
        entity.setSituationCheck_fifteen(cursor.getInt(offset + 22));
        entity.setOtherproblemsthat(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setRectificationOpinions_one(cursor.getInt(offset + 24));
        entity.setRectificationOpinions_two(cursor.getInt(offset + 25));
        entity.setRectificationOpinions_three(cursor.getInt(offset + 26));
        entity.setRectificationOpinions_four(cursor.getInt(offset + 27));
        entity.setRectificationOpinions_five(cursor.getInt(offset + 28));
        entity.setLeaderIdea_one(cursor.getInt(offset + 29));
        entity.setLeaderIdea_two(cursor.getInt(offset + 30));
        entity.setLeaderIdeacontent(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setLeaderIdea_three(cursor.getInt(offset + 32));
        entity.setIsLocal(cursor.getShort(offset + 33) != 0);
        entity.setSaveTime(cursor.getLong(offset + 34));
        entity.setSavaServerTime(cursor.getLong(offset + 35));
        entity.setUnitId(cursor.getInt(offset + 36));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CRModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CRModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CRModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
