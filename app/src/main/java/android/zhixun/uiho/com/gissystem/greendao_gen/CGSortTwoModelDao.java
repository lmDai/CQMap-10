package android.zhixun.uiho.com.gissystem.greendao_gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import android.zhixun.uiho.com.gissystem.flux.models.CGSortTwoModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CGSORT_TWO_MODEL".
*/
public class CGSortTwoModelDao extends AbstractDao<CGSortTwoModel, Long> {

    public static final String TABLENAME = "CGSORT_TWO_MODEL";

    /**
     * Properties of entity CGSortTwoModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Call = new Property(1, String.class, "call", false, "CALL");
        public final static Property Dit = new Property(2, String.class, "dit", false, "DIT");
        public final static Property Rank = new Property(3, String.class, "rank", false, "RANK");
        public final static Property HCJZ = new Property(4, String.class, "HCJZ", false, "HCJZ");
        public final static Property CRKey = new Property(5, int.class, "CRKey", false, "CRKEY");
    }

    private DaoSession daoSession;


    public CGSortTwoModelDao(DaoConfig config) {
        super(config);
    }
    
    public CGSortTwoModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CGSORT_TWO_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CALL\" TEXT," + // 1: call
                "\"DIT\" TEXT," + // 2: dit
                "\"RANK\" TEXT," + // 3: rank
                "\"HCJZ\" TEXT," + // 4: HCJZ
                "\"CRKEY\" INTEGER NOT NULL );"); // 5: CRKey
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CGSORT_TWO_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CGSortTwoModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String call = entity.getCall();
        if (call != null) {
            stmt.bindString(2, call);
        }
 
        String dit = entity.getDit();
        if (dit != null) {
            stmt.bindString(3, dit);
        }
 
        String rank = entity.getRank();
        if (rank != null) {
            stmt.bindString(4, rank);
        }
 
        String HCJZ = entity.getHCJZ();
        if (HCJZ != null) {
            stmt.bindString(5, HCJZ);
        }
        stmt.bindLong(6, entity.getCRKey());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CGSortTwoModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String call = entity.getCall();
        if (call != null) {
            stmt.bindString(2, call);
        }
 
        String dit = entity.getDit();
        if (dit != null) {
            stmt.bindString(3, dit);
        }
 
        String rank = entity.getRank();
        if (rank != null) {
            stmt.bindString(4, rank);
        }
 
        String HCJZ = entity.getHCJZ();
        if (HCJZ != null) {
            stmt.bindString(5, HCJZ);
        }
        stmt.bindLong(6, entity.getCRKey());
    }

    @Override
    protected final void attachEntity(CGSortTwoModel entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CGSortTwoModel readEntity(Cursor cursor, int offset) {
        CGSortTwoModel entity = new CGSortTwoModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // call
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dit
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // rank
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // HCJZ
            cursor.getInt(offset + 5) // CRKey
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CGSortTwoModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCall(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDit(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRank(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHCJZ(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCRKey(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CGSortTwoModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CGSortTwoModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CGSortTwoModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
