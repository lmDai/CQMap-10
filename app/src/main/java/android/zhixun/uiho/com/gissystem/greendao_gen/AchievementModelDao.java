package android.zhixun.uiho.com.gissystem.greendao_gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import android.zhixun.uiho.com.gissystem.flux.models.AchievementModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACHIEVEMENT_MODEL".
*/
public class AchievementModelDao extends AbstractDao<AchievementModel, Long> {

    public static final String TABLENAME = "ACHIEVEMENT_MODEL";

    /**
     * Properties of entity AchievementModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UnitKey = new Property(1, Long.class, "unitKey", false, "UNIT_KEY");
        public final static Property Time = new Property(2, Long.class, "time", false, "TIME");
        public final static Property BjCode = new Property(3, String.class, "bjCode", false, "BJ_CODE");
    }


    public AchievementModelDao(DaoConfig config) {
        super(config);
    }
    
    public AchievementModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACHIEVEMENT_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UNIT_KEY\" INTEGER," + // 1: unitKey
                "\"TIME\" INTEGER," + // 2: time
                "\"BJ_CODE\" TEXT);"); // 3: bjCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACHIEVEMENT_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AchievementModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long unitKey = entity.getUnitKey();
        if (unitKey != null) {
            stmt.bindLong(2, unitKey);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(3, time);
        }
 
        String bjCode = entity.getBjCode();
        if (bjCode != null) {
            stmt.bindString(4, bjCode);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AchievementModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long unitKey = entity.getUnitKey();
        if (unitKey != null) {
            stmt.bindLong(2, unitKey);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(3, time);
        }
 
        String bjCode = entity.getBjCode();
        if (bjCode != null) {
            stmt.bindString(4, bjCode);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AchievementModel readEntity(Cursor cursor, int offset) {
        AchievementModel entity = new AchievementModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // unitKey
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // bjCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AchievementModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUnitKey(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setBjCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AchievementModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AchievementModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AchievementModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
