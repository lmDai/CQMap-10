package android.zhixun.uiho.com.gissystem.greendao_gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import android.zhixun.uiho.com.gissystem.flux.models.CRActiveUserModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CRACTIVE_USER_MODEL".
*/
public class CRActiveUserModelDao extends AbstractDao<CRActiveUserModel, Long> {

    public static final String TABLENAME = "CRACTIVE_USER_MODEL";

    /**
     * Properties of entity CRActiveUserModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CdKey = new Property(1, long.class, "cdKey", false, "CD_KEY");
        public final static Property UserId = new Property(2, Long.class, "userId", false, "USER_ID");
        public final static Property UserUnitId = new Property(3, int.class, "userUnitId", false, "USER_UNIT_ID");
        public final static Property Nickname = new Property(4, String.class, "Nickname", false, "NICKNAME");
    }

    private DaoSession daoSession;


    public CRActiveUserModelDao(DaoConfig config) {
        super(config);
    }
    
    public CRActiveUserModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CRACTIVE_USER_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CD_KEY\" INTEGER NOT NULL ," + // 1: cdKey
                "\"USER_ID\" INTEGER," + // 2: userId
                "\"USER_UNIT_ID\" INTEGER NOT NULL ," + // 3: userUnitId
                "\"NICKNAME\" TEXT UNIQUE );"); // 4: Nickname
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CRACTIVE_USER_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CRActiveUserModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCdKey());
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(3, userId);
        }
        stmt.bindLong(4, entity.getUserUnitId());
 
        String Nickname = entity.getNickname();
        if (Nickname != null) {
            stmt.bindString(5, Nickname);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CRActiveUserModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCdKey());
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(3, userId);
        }
        stmt.bindLong(4, entity.getUserUnitId());
 
        String Nickname = entity.getNickname();
        if (Nickname != null) {
            stmt.bindString(5, Nickname);
        }
    }

    @Override
    protected final void attachEntity(CRActiveUserModel entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CRActiveUserModel readEntity(Cursor cursor, int offset) {
        CRActiveUserModel entity = new CRActiveUserModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // cdKey
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // userId
            cursor.getInt(offset + 3), // userUnitId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // Nickname
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CRActiveUserModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCdKey(cursor.getLong(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setUserUnitId(cursor.getInt(offset + 3));
        entity.setNickname(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CRActiveUserModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CRActiveUserModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CRActiveUserModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
